#!/bin/bash

#
# OGP - Open Game Panel
# Copyright (C) Copyright (C) 2008 - 2013 The OGP Development Team
#
# http://www.opengamepanel.org/
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

readonly DEFAULT_PORT=12679
readonly DEFAULT_IP=0.0.0.0
readonly AGENT_VERSION='v1.3'
readonly DEFAULT_FTP_PORT=21
readonly DEFAULT_FTP_PASV_RANGE=40000:50000

CWD=`cygpath -wa .`

cpan -i Archive::Extract

svn co http://svn.code.sf.net/p/hldstart/code/trunk/agent_win/bin /usr/bin
mkdir /OGP
rm -Rf /OGP/.svn
svn co http://svn.code.sf.net/p/hldstart/code/trunk/agent /OGP
rm -Rf /OGP/install.sh /OGP/includes /OGP/.svn /OGP/Cfg/Config.pm
mkdir /OGP/tmp
chmod +x /usr/bin/ogp_agent
rm -f /OGP/ogp_agent.pl
rm -f /OGP/ogp_screenrc
svn co http://svn.code.sf.net/p/hldstart/code/trunk/agent_win/OGP /OGP
chmod +x /OGP/ogp_agent.pl

cfgfile=/OGP/Cfg/Config.pm
prefsfile=/OGP/Cfg/Preferences.pm
bashprefsfile=/OGP/Cfg/bash_prefs.cfg

overwrite_config=1

if [ -e ${cfgfile} ]; then
    while [ 1 ]
    do
        echo -n "Overwrite old config file ($cfgfile) [Y/N]: " 
        read octmp
        if [ "$octmp" == "Y" -o "$octmp" == "y" ]
        then
            break
        elif [ "$octmp" == "N" -o "$octmp" == "n" ]
        then
            overwrite_config=0
            break
        else
            echo "Invalid value, accepted values 'Y'and 'N'."
        fi
    done
fi

if [ "X${overwrite_config}" == "X1" ]
then
    echo "#######################################################################"
    echo ""
    echo "OGP agent uses basic encryption to prevent unauthorized users from connecting"
    echo "Enter a string of alpha-numeric characters for example 'abcd12345'"
    echo "**** NOTE - Use the same key in your Open Game Panel webpage config file - they must match *****"
    echo ""

    while [ -z "${key}" ]
    do 
        echo -n "Set encryption key: "
        read key
    done

    echo
    echo "Set the listen port for the agent. The default should be fine for everyone."
    echo "However, if you want to change it that can be done here, otherwise just press Enter."
    echo -n "Set listen port [Default ${DEFAULT_PORT}]: "
    read port

    if [ -z "${port}" ]
    then 
        port=$DEFAULT_PORT
    fi

    echo 
    echo "Set the listen IP for the agent."
    echo "Default is (${DEFAULT_IP}) to bind on all interfaces."
    echo -n "Set listen IP [Default ${DEFAULT_IP}]: "
    read ip

    if [ -z "${ip}" ]  
    then 
        ip=$DEFAULT_IP
    fi 

    while [ 1 ]
    do
        echo
        echo "For some games the OGP panel is using Steam client."
        echo "This client has its own license that you need to agree before continuing."
        echo "This agreement is available at http://store.steampowered.com/subscriber_agreement/"
        echo;
		echo -n "Do you accept the terms of Steam(tm) Subscriber Agreement [Accept|Reject]: "
        read steam_license
        if [ "$steam_license" == "Accept" -o "$steam_license" == "Reject" ]
        then 
            break;
        fi

        echo "You need to type either 'Accept' or 'Reject'.";
    done
	
	echo "Writing Config file - $cfgfile"

    echo "%Cfg::Config = (
    logfile => '/OGP/ogp_agent.log',
    listen_port  => '${port}',
    listen_ip => '${ip}',
    version => '${AGENT_VERSION}',
    key => '${key}',
    steam_license => '${steam_license}',
    );" > $cfgfile
	
	if [ $? != 0 ]
    then
        failed "Failed to write config file."
    fi 
    
    echo;
    echo -n "Should the Open Game Panel agent auto update when the service is restarted or started? [yes|no]: "
    read auto_update
    if [ "${auto_update}" != "yes" ] && [ "${auto_update}" != "no" ]
    then 
        autoUpdate=1
    else
    	  if [ "${auto_update}" == "yes" ]
    	  then
	    	  autoUpdate=1
	     else
	     	  autoUpdate=0
	     fi
    fi
	
	echo;
	echo "What mirror you want to use for updating the agent?: "
	echo;
	echo "1  - SourceForge, Inc. (Chicago, Illinois, US)"
	echo "2  - AARNet (Melbourne, Australia, AU)"
	echo "3  - CityLan (Moscow, Russian Federation, RU)"
	echo "4  - Free France (Paris, France, FR)"
	echo "5  - garr.it (Ancona, Italy, IT)"
	echo "6  - HEAnet (Ireland, IE)"
	echo "7  - HiVelocity (Tampa, FL, US)"
	echo "8  - Internode (Adelaide, Australia, AU)"
	echo "9  - Japan Advanced Institute of Science and Technology (Nomi, Japan, JP)"
	echo "10 - kaz.kz (Almaty, Kazakhstan, KZ)"
	echo "11 - University of Kent (Canterbury, United Kingdom, GB)"
	echo "12 - NetCologne (K&ouml;ln, Germany, DE)"
	echo "13 - Optimate-Server (Germany, DE)"
	echo "14 - Softlayer (Dallas, TX, US)"
	echo "15 - SURFnet (Zurich, Switzerland, CH)"
	echo "16 - SWITCH (Zurich, Switzerland, CH)"
	echo "17 - Centro de Computacao Cientifica e Software Livre (Curitiba, Brazil, BR)"
	read setmirror
	case ${setmirror} in
		1) mirror="master"
		;;
		2) mirror="aarnet"
		;;
		3) mirror="citylan"
		;;
		4) mirror="freefr"
		;;
		5) mirror="garr"
		;;
		6) mirror="heanet"
		;;
		7) mirror="hivelocity"
		;;
		8) mirror="internode"
		;;
		9) mirror="jaist"
		;;
		10) mirror="kaz"
		;;
		11) mirror="kent"
		;;
		12) mirror="netcologne"
		;;
		13) mirror="optimate"
		;;
		14) mirror="softlayer-dal"
		;;
		15) mirror="surfnet"
		;;
		16) mirror="switch"
		;;
		17) mirror="ufpr"
		;;
		*) mirror="master"
		;;
	esac
	
    echo;
    echo -n "Should Open Game Panel store a local copy of the server log file in the user's home directory? [yes|no]: "
    read log_local_copy
    if [ "${log_local_copy}" != "yes" ] && [ "${log_local_copy}" != "no" ]
    then 
        logLocalCopy=1
    else
    	  if [ "${log_local_copy}" == "yes" ]
    	  then
	    	  logLocalCopy=1
	     else
	     	  logLocalCopy=0
	     fi
    fi
    
	echo;
    echo -n "After how many days should old log file backups be deleted from the system? [30]: "
    read delete_logs_after
    case ${delete_logs_after} in
    	''|*[!0-9]*) deleteLogsAfter=30 ;;
    	*) deleteLogsAfter=${delete_logs_after} ;;
    esac
    
    echo;
    echo -n "Should the Open Game Panel agent automatically restart game servers if they crash? [yes|no]: "
    read auto_restart
    if [ "${auto_restart}" != "yes" ] && [ "${auto_restart}" != "no" ]
    then 
        autoRestart=1
    else
    	  if [ "${auto_restart}" == "yes" ]
    	  then
	    	  autoRestart=1
	     else
	     	  autoRestart=0
	     fi
    fi
    
    echo;
    echo -n "Should Open Game Panel create and manage FTP accounts for panel users (FTP users, permissions, etc)? [yes|no]: "
    read manage_ftp
    if [ "${manage_ftp}" != "yes" ] && [ "${manage_ftp}" != "no" ]; then
		ogpManagesFTP=1
    else
		if [ "${manage_ftp}" == "no" ]; then
			ogpManagesFTP=0
		else
			ogpManagesFTP=1
		fi
    fi
   	
	if [ "$ogpManagesFTP" == "1" ]
	then
		echo
		echo "Set the listen port for the FTP server. The default should be fine for everyone."
		echo "However, if you want to change it that can be done here, otherwise just press Enter."
		echo -n "Set listen port [Default ${DEFAULT_FTP_PORT}]: "
		read port

		if [ -z "${ftp_port}" ]
		then 
			ftp_port=$DEFAULT_FTP_PORT
		fi

		echo 
		echo "Set the listen IP for the FTP server."
		echo "Default is (${DEFAULT_IP}) to bind on all interfaces."
		echo -n "Set FTP server IP [Default ${DEFAULT_IP}]: "
		read ip

		if [ -z "${ip}" ]  
		then 
			ftp_ip=$DEFAULT_IP
		fi
		
		echo
		echo "Passive-mode downloads."
		echo "This is especially useful if the server is behind a firewall."
		echo -n "Use only ports in the range?(yes|no)[Default no]: "
		read passive_ftp

		if [ -z "${passive_ftp}" -o "${passive_ftp}" != "yes" ]
		then 
			ftp_pasv_range=""
		else
			echo "Enter passive ports range separated by colon (<first port>:<last port>)."
			echo -n "[Default ${DEFAULT_FTP_PASV_RANGE}]: "
			read ftp_pasv_range
			if [ -z "${ftp_pasv_range}" ]
			then 
				ftp_pasv_range=$DEFAULT_FTP_PASV_RANGE
			fi
		fi
	else
		ftp_port=$DEFAULT_FTP_PORT
		ftp_ip=$DEFAULT_IP
		ftp_pasv_range=""
	fi
	
	echo "Writing Preferences file - $prefsfile"
	
    echo "%Cfg::Preferences = (
    screen_log_local => '${logLocalCopy}',
    delete_logs_after => '${deleteLogsAfter}',
    ogp_manages_ftp => '${ogpManagesFTP}',
    ogp_autorestart_server => '${autoRestart}',
    );" > $prefsfile 
	
	if [ $? != 0 ]
    then
        failed "Failed to write preferences file."
    fi 
    
    echo "Writing MISC configuration file used by bash scripts - $bashprefsfile"
    echo -e "agent_auto_update=${autoUpdate}\nogp_manages_ftp=${ogpManagesFTP}\nftp_port=${ftp_port}\nftp_ip=${ftp_ip}\nftp_pasv_range=${ftp_pasv_range}\nsf_update_mirror=${mirror}" > $bashprefsfile
	
	if [ $? != 0 ]
    then
        failed "Failed to write MISC configuration file used by bash scripts."
    fi
fi

ogp_agent
